import logging
import base64
import requests
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InputFile
from telegram.ext import filters, Application, CommandHandler, MessageHandler, CallbackContext, ConversationHandler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
NAME, PHONE, ROLE, MARKETPLACE, MANAGEMENT, TEAM, ISSUES, ISSUES_DESCRIPTION = range(8)

# –ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ GitHub
GITHUB_REPO = "gromykolina/myfirstbot"
GITHUB_FILE_PATH = "contacts.csv"
GITHUB_TOKEN = "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"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
WELCOME_IMAGE_PATH = r'profile_icon2.png'

# –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª –Ω–∞ GitHub
def save_to_github(data):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{GITHUB_FILE_PATH}"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        response = requests.get(url, headers=headers)
        response_data = response.json()

        if response.status_code == 404:
            # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            sha = None
            content = ""
        else:
            # –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ SHA –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            sha = response_data.get("sha")
            content = base64.b64decode(response_data.get("content")).decode('utf-8')

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        csv_data = content + ','.join(data) + "\n"

        # –ö–æ–¥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ base64
        updated_content = base64.b64encode(csv_data.encode('utf-8')).decode('utf-8')

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        data = {
            "message": "Update contacts.csv",
            "content": updated_content,
            "sha": sha
        }

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        response = requests.put(url, headers=headers, json=data)
        response.raise_for_status()
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ GitHub.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ GitHub: {e}")

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def start(update: Update, context: CallbackContext) -> int:
    try:
        await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã "–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä"! üéâ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.')
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with open(WELCOME_IMAGE_PATH, 'rb') as photo:
            await update.message.reply_photo(photo=InputFile(photo), caption='–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    return NAME

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
async def get_name(update: Update, context: CallbackContext) -> int:
    try:
        context.user_data['name'] = update.message.text
        contact_button = KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        reply_markup = ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(f'–û—Ç–ª–∏—á–Ω–æ, {context.user_data["name"]}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –≤–≤–æ–¥–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è").', reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    return PHONE

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def get_phone(update: Update, context: CallbackContext) -> int:
    try:
        contact = update.effective_message.contact
        context.user_data['phone'] = contact.phone_number if contact else update.message.text
        reply_markup = ReplyKeyboardMarkup(
            [['–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–≤–µ–Ω–∞'],
             ['–ù–æ–≤–∏—á–æ–∫', '–î—Ä—É–≥–æ–µ']],
            one_time_keyboard=True, resize_keyboard=True
        )
        await update.message.reply_text(
            f'–ê –∫–∞–∫—É—é —Ä–æ–ª—å –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ –≤ –±–∏–∑–Ω–µ—Å–µ?',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    return ROLE

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤ –±–∏–∑–Ω–µ—Å–µ
async def get_role(update: Update, context: CallbackContext) -> int:
    try:
        context.user_data['role'] = update.message.text
        reply_markup = ReplyKeyboardMarkup([['–î–∞', '–ù–µ—Ç']], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(f'{context.user_data["name"]}, –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≤—ã —Ç–æ—Ä–≥—É–µ—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö Wildberries –∏–ª–∏ Ozon?', reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    return MARKETPLACE

# –í–æ–ø—Ä–æ—Å –æ —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö
async def get_marketplace(update: Update, context: CallbackContext) -> int:
    try:
        answer = update.message.text.lower()
        context.user_data['marketplace'] = answer
        if answer == '–¥–∞':
            reply_markup = ReplyKeyboardMarkup(
                [['–Ø –æ–¥–∏–Ω', '–° –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'], ['–° –∫–æ–º–∞–Ω–¥–æ–π']],
                one_time_keyboard=True, resize_keyboard=True
            )
            await update.message.reply_text(
                f'–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞–∑–≤–∏—Ç–∏–µ–º –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞?',
                reply_markup=reply_markup
            )
            return MANAGEMENT
        else:
            await save_and_send_checklist(update, context)
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∞–º–∏
async def get_management(update: Update, context: CallbackContext) -> int:
    try:
        management_type = update.message.text.lower()
        context.user_data['management'] = management_type
        if management_type == '—è –æ–¥–∏–Ω':
            reply_markup = ReplyKeyboardMarkup([['–î–∞', '–ù–µ—Ç']], one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text(
                f'{context.user_data["name"]}, –∞ –∑–∞–¥—É–º—ã–≤–∞–ª–∏—Å—å –ª–∏ –≤—ã –æ –Ω–∞–π–º–µ –∫–æ–º–∞–Ω–¥—ã?',
                reply_markup=reply_markup
            )
            return TEAM
        elif management_type in ['—Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', '—Å –∫–æ–º–∞–Ω–¥–æ–π']:
            reply_markup = ReplyKeyboardMarkup([['–î–∞', '–ù–µ—Ç']], one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text(
                f'–í–æ–∑–Ω–∏–∫–∞—é—Ç –ª–∏ —É –≤–∞—Å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π?',
                reply_markup=reply_markup
            )
            return ISSUES
        else:
            await update.message.reply_text(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: "–Ø –æ–¥–∏–Ω", "–° –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "–° –∫–æ–º–∞–Ω–¥–æ–π".'
            )
            return MANAGEMENT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return MANAGEMENT

# –í–æ–ø—Ä–æ—Å –æ –Ω–∞–π–º–µ –∫–æ–º–∞–Ω–¥—ã
async def get_team(update: Update, context: CallbackContext) -> int:
    try:
        context.user_data['team'] = update.message.text.lower()
        await save_and_send_checklist(update, context)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ –Ω–∞–π–º–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

# –¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π
async def get_issues(update: Update, context: CallbackContext) -> int:
    try:
        answer = update.message.text.lower()
        if answer == '–¥–∞':
            context.user_data['issues'] = True
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–∞—é—Ç.')
            return ISSUES_DESCRIPTION
        else:
            context.user_data['issues'] = False
            await save_and_send_checklist(update, context)
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

# –£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–º–∞–Ω–¥–æ–π
async def get_issues_description(update: Update, context: CallbackContext) -> int:
    try:
        context.user_data['issues_description'] = update.message.text
        await save_and_send_checklist(update, context)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
async def save_and_send_checklist(update: Update, context: CallbackContext):
    try:
        user_data = context.user_data
        data = [
            user_data.get('name', ''),
            user_data.get('phone', ''),
            user_data.get('role', ''),
            user_data.get('marketplace', ''),
            user_data.get('management', ''),
            user_data.get('team', ''),
            user_data.get('issues', ''),
            user_data.get('issues_description', '')
        ]
        save_to_github(data)
        await update.message.reply_text("–í–∞—à —á–µ–∫-–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫-–ª–∏—Å—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application = Application.builder().token("7409762233:AAExIGMf0Ulz_Wx74SzU01S9VbUObX952Z0").build()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.CONTACT, get_phone)],
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_role)],
            MARKETPLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_marketplace)],
            MANAGEMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_management)],
            TEAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_team)],
            ISSUES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_issues)],
            ISSUES_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_issues_description)],
        },
        fallbacks=[CommandHandler('cancel', start)],
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
